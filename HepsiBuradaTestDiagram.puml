@startuml
class dataPorter.ImportFromXL {
~ ExelBase obj
+ Object[][] getConstants()
}
class utility.managers.FeedBackManager {
}
class utility.SuiteListener {
+ void onTestStart(ITestResult)
+ void onTestSuccess(ITestResult)
+ void onTestFailure(ITestResult)
+ void onTestSkipped(ITestResult)
+ void onTestFailedButWithinSuccessPercentage(ITestResult)
+ void onTestFailedWithTimeout(ITestResult)
+ void onStart(ITestContext)
+ void onFinish(ITestContext)
+ void transform(ITestAnnotation,Class,Constructor,Method)
}
class utility.RetryAnalyser {
~ ınt count
~ ınt retryCount
+ boolean retry(ITestResult)
}
interface actioninterface.ActionInterface {
+ void scrollByVisibilityOfElement(WebDriver,WebElement)
+ void click(WebDriver,WebElement)
+ boolean isDisplayed(WebDriver,WebElement)
+ boolean type(WebElement,String)
+ boolean findElement(WebDriver,WebElement)
+ boolean isSelected(WebDriver,WebElement)
+ boolean isEnabled(WebDriver,WebElement)
+ boolean selectBySendkeys(String,WebElement)
+ boolean selectByIndex(WebElement,ınt)
+ boolean selectByValue(WebElement,String)
+ boolean selectByVisibleText(String,WebElement)
+ boolean mouseHoverByJavaScript(WebElement)
+ boolean JSClick(WebDriver,WebElement)
+ boolean switchToFrameByIndex(WebDriver,ınt)
+ boolean switchToFrameById(WebDriver,String)
+ boolean switchToFrameByName(WebDriver,String)
+ boolean switchToDefaultFrame(WebDriver)
+ void mouseOverElement(WebDriver,WebElement)
+ boolean moveToElement(WebDriver,WebElement)
+ boolean mouseover(WebDriver,WebElement)
+ boolean draggable(WebDriver,WebElement,ınt,ınt)
+ boolean draganddrop(WebDriver,WebElement,WebElement)
+ boolean slider(WebDriver,WebElement,ınt,ınt)
+ boolean rightclick(WebDriver,WebElement)
+ boolean switchWindowByTitle(WebDriver,String,ınt)
+ boolean switchToNewWindow(WebDriver)
+ boolean switchToOldWindow(WebDriver)
+ ınt getColumncount(WebElement)
+ ınt getRowCount(WebElement)
+ boolean Alert(WebDriver)
+ boolean launchUrl(WebDriver,String)
+ boolean isAlertPresent(WebDriver)
+ String getCurrentURL(WebDriver)
+ String getTitle(WebDriver)
+ boolean click1(WebElement,String)
+ void fluentWait(WebDriver,WebElement,ınt)
+ void implicitWait(WebDriver,ınt)
+ void explicitWait(WebDriver,WebElement,ınt)
+ void pageLoadTimeOut(WebDriver,ınt)
+ String screenShot(WebDriver,String)
+ String getCurrentTime()
}
class dataPorter.ExelBase {
+ {static} String path
+ FileInputStream fis
+ FileOutputStream fileOut
- XSSFWorkbook workbook
- XSSFSheet sheet
- XSSFRow row
- XSSFCell cell
+ <<Create>> ExelBase()
+ <<Create>> ExelBase(String)
+ ınt getRowCount(String)
+ ınt getColumnCount(String)
+ String getCellData(String,ınt,ınt)
+ boolean isSheetExist(String)
}
class dataPorter.ExportToXL {
~ String filePath
~ String fileName
~ String sheetName
~ File file
~ FileInputStream inputStream
~ FileOutputStream outputStream
~ Workbook workBook
~ Sheet sheet
+ <<Create>> ExportToXL()
- void Initialize()
+ void Export(String[])
+ void StreamFlush()
}
class utility.managers.ExtentTestObject {
+ ExtentTest test
}
class pageObjects.TempObjects {
- WebElement pageObject
+ boolean pageMethodTemplate()
}
class utility.managers.ExtentManager {
+ {static} ExtentHtmlReporter htmlReporter
+ {static} ExtentReports extent
+ {static} ExtentTest test
+ {static} void setExtent()
+ {static} void endReport()
+ {static} void extentInfo(String)
}
class pageObjects.BasePage {
~ Action action
- WebElement tempElement
+ boolean methodTemplate()
}
class utility.managers.Log {
+ {static} Logger Log
+ {static} void startTestCase(String)
+ {static} void endTestCase(String)
+ {static} void info(String)
+ {static} void warn(String)
+ {static} void error(String)
+ {static} void fatal(String)
+ {static} void debug(String)
}
class pageObjects.TempPage {
~ Action action
- WebElement myWishList
- WebElement orderHistory
+ <<Create>> TempPage()
+ boolean validateMyWishList()
+ boolean validateOrderHistory()
+ String getCurrURL()
+ boolean LaunchUrl(String)
}
class base.BaseClass {
+ {static} ThreadLocal<RemoteWebDriver> driver
+ {static} Actions action
+ void Initialize()
+ void beforeMethodMethod(String,Method)
+ void afterMethodMethod()
+ void afterSuite()
+ void setupDriver(String)
+ {static} WebDriver getDriver()
}
class actiondriver.Action {
+ void scrollByVisibilityOfElement(WebDriver,WebElement)
+ void click(WebDriver,WebElement)
+ boolean findElement(WebDriver,WebElement)
+ boolean isDisplayed(WebDriver,WebElement)
+ boolean isSelected(WebDriver,WebElement)
+ boolean isEnabled(WebDriver,WebElement)
+ boolean type(WebElement,String)
+ boolean selectBySendkeys(String,WebElement)
+ boolean selectByIndex(WebElement,ınt)
+ boolean selectByValue(WebElement,String)
+ boolean selectByVisibleText(String,WebElement)
+ boolean mouseHoverByJavaScript(WebElement)
+ boolean JSClick(WebDriver,WebElement)
+ boolean switchToFrameByIndex(WebDriver,ınt)
+ boolean switchToFrameById(WebDriver,String)
+ boolean switchToFrameByName(WebDriver,String)
+ boolean switchToDefaultFrame(WebDriver)
+ void mouseOverElement(WebDriver,WebElement)
+ boolean moveToElement(WebDriver,WebElement)
+ boolean mouseover(WebDriver,WebElement)
+ boolean draggable(WebDriver,WebElement,ınt,ınt)
+ boolean draganddrop(WebDriver,WebElement,WebElement)
+ boolean slider(WebDriver,WebElement,ınt,ınt)
+ boolean rightclick(WebDriver,WebElement)
+ boolean switchWindowByTitle(WebDriver,String,ınt)
+ boolean switchToNewWindow(WebDriver)
+ boolean switchToOldWindow(WebDriver)
+ ınt getColumncount(WebElement)
+ ınt getRowCount(WebElement)
+ boolean Alert(WebDriver)
+ boolean launchUrl(WebDriver,String)
+ boolean isAlertPresent(WebDriver)
+ String getTitle(WebDriver)
+ String getCurrentURL(WebDriver)
+ boolean click1(WebElement,String)
+ void fluentWait(WebDriver,WebElement,ınt)
+ void implicitWait(WebDriver,ınt)
+ void explicitWait(WebDriver,WebElement,ınt)
+ void pageLoadTimeOut(WebDriver,ınt)
+ String screenShot(WebDriver,String)
+ String getCurrentTime()
}


org.testng.ITestListener <|.. utility.SuiteListener
org.testng.IAnnotationTransformer <|.. utility.SuiteListener
utility.managers.ExtentManager <|-- utility.SuiteListener
org.testng.IRetryAnalyzer <|.. utility.RetryAnalyser
pageObjects.BasePage <|-- pageObjects.TempObjects
base.BaseClass <|-- pageObjects.BasePage
pageObjects.BasePage <|-- pageObjects.TempPage
actioninterface.ActionInterface <|.. actiondriver.Action
base.BaseClass <|-- actiondriver.Action
@enduml